{"version":3,"sources":["redux/actionTypes.js","redux/actions.js","components/ContactsEditor.js","components/ContactsList.js","components/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js"],"names":["addContact","createAction","actionTypes","name","number","payload","items","id","v4","removeContact","findContact","filter","ContactsEditor","state","double","handleChange","value","setState","handleSubmit","e","props","itemsList","onAddContact","preventDefault","includes","length","setTimeout","this","CSSTransition","in","timeout","unmountOnExit","classNames","className","onSubmit","onChange","target","placeholder","type","Component","connect","ownProps","contacts","dispatch","actions","mapDispatchToProps","removeItem","contactsss","toLowerCase","TransitionGroup","component","map","key","onClick","findByName","arrLength","App","appear","createReducer","action","combineReducers","rootReducer","contactsReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a1f4cc64.chunk.js","sourcesContent":["const ADD = 'ADD_CONTACT';\nconst REMOVE = 'REMOVE_CONTACT';\nconst FIND_CONTACT = 'FIND_CONTACT';\n\nexport default {\n    ADD,\n    REMOVE,\n    FIND_CONTACT\n}","import {v4} from 'uuid'\nimport {createAction} from '@reduxjs/toolkit'\nimport actionTypes from './actionTypes'\n\n// const addContact = (name, number) => ({\n//     type: actionTypes.ADD,\n//     payload: {\n//         items: {\n//             id: v4(),\n//             name,\n//             number\n//         }\n//     }\n// })\n\nconst addContact = createAction(actionTypes.ADD, (name, number) => ({\n    payload: {\n        items: {\n            id: v4(),\n            name,\n            number\n        }\n    }\n}))\n\n// const removeContact = id => ({\n//     type: actionTypes.REMOVE,\n//     payload: {\n//         id\n//     }\n// })\n\nconst removeContact = createAction(actionTypes.REMOVE, id => ({\n    payload: {\n        id\n    }\n}))\n\n// const findContact = filter => ({\n//     type: actionTypes.FIND_CONTACT,\n//     payload : {\n//         filter: filter\n//     }\n// })\n\nconst findContact = createAction(actionTypes.FIND_CONTACT, filter => ({\n    payload: {\n        filter: filter\n    }\n}))\n\nexport default {\n    addContact,\n    removeContact,\n    findContact\n}","import React, { Component } from 'react';\nimport {CSSTransition} from 'react-transition-group'\nimport {connect} from 'react-redux'\nimport actions from '../redux/actions'\nimport '../style.css'\nimport propTypes from 'prop-types'\n\nclass ContactsEditor extends Component {\n\n    state = {\n        name: '',\n        number: '',\n        double: false\n    }\n\n    handleChange = (name, value)=> {\n        this.setState({[name]: value})\n    }\n\n    handleSubmit = e => {\n        const {name, number} = this.state\n        const {itemsList, onAddContact} = this.props\n        e.preventDefault()\n        if(!itemsList.filter(e => e.name.includes(name)).length >= 1) {\n            onAddContact(name, number)\n            this.setState({name: '', number: ''})\n        } else {\n            this.setState({name: '', number: '', double: true})}\n            setTimeout(() => {this.setState({double: false})}, 1000 )\n    }\n\n    render () {\n        const {name, number, double} = this.state\n        const {itemsList} = this.props\n        \n        return (\n            <>\n            <CSSTransition in={double} timeout={1000} unmountOnExit classNames=\"warn\"><p className=\"warn\">Problem invoked!</p></CSSTransition>\n            <form onSubmit={(e) => this.handleSubmit(e)}>\n                <input \n                    onChange={(e) => this.handleChange(e.target.name, e.target.value)} \n                    placeholder=\"name\"\n                    value={name} \n                    name=\"name\" \n                    type=\"text\"\n                    className=\"name\">\n                </input>\n                <input onChange={(e) => this.handleChange(e.target.name, e.target.value)} \n                    placeholder=\"number\"\n                    value={number} \n                    name=\"number\" \n                    type=\"text\"\n                    className=\"number\">\n                </input>\n                <button className=\"button\" type=\"submit\">add</button>\n            </form>\n            </>\n        )\n    }\n};\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        itemsList: state.contacts.items\n    }\n}\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        onAddContact: (name, number) => {\n            dispatch(actions.addContact(name, number))\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsEditor)\n\nContactsEditor.propTypes = {\n    onAddContact: propTypes.func,\n    itemsList: propTypes.array\n}","import React from 'react'\nimport {CSSTransition, TransitionGroup} from 'react-transition-group'\nimport {connect} from 'react-redux'\nimport actions from '../redux/actions'\nimport propTypes from 'prop-types'\nimport '../style.css'\n\nconst ContactsList = ({contactsss, removeItem}) => {\n    return(\n        <TransitionGroup component=\"ul\">\n            {contactsss.map(({id, name, number}) => (\n                <CSSTransition key={id} in={true}  timeout={500} classNames=\"listItem\" className=\"listElement\">\n                <li key={id} >\n                    <span className=\"name\">{name}</span><span className=\"number\">{number}</span>\n                    <button className=\"button\" onClick={() => removeItem(id)}>remove</button>\n                </li>\n                </CSSTransition>\n            ))}\n        </TransitionGroup>\n    )\n}\n\nconst mapStateToProps = state => {\n    \n    const visibleContacts = state.contacts.items.filter(e => e.name.toLowerCase().includes(state.contacts.filter.toLowerCase()))\n    return {\n        contactsss: visibleContacts\n    }\n}\nconst mapDispatchToProps = {\n    removeItem: actions.removeContact,\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList)\n\nContactsList.propTypes = {\n    contactsss: propTypes.array,\n    removeItem: propTypes.func   \n}","import React from 'react';\nimport {CSSTransition} from 'react-transition-group'\nimport {connect} from 'react-redux'\nimport actions from '../redux/actions'\nimport '../style.css'\nimport propTypes from 'prop-types'\n\nfunction Filter({value, findByName, arrLength}) {\n    return (\n        <CSSTransition in={arrLength > 1} timeout={500} unmountOnExit classNames=\"filter\">\n            <input\n            className=\"name findElement\"\n                type=\"text\"\n                value={value}\n                placeholder=\"find\"\n                onChange={e => findByName(e.target.value)}>\n            </input>\n        </CSSTransition>\n    )\n}\nconst mapStateToProps = (state) => {\n    return {\n        value: state.contacts.filter,\n        arrLength: state.contacts.items.length\n    }\n}\nconst mapDispatchToProps = {\n    findByName: actions.findContact\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter)\n\nFilter.propTypes = {\n    value: propTypes.string,\n    findByName: propTypes.func,\n    arrLength: propTypes.number\n}","import React from 'react'\nimport {CSSTransition} from 'react-transition-group'\nimport ContactsEditor from './components/ContactsEditor'\nimport ContactsList from './components/ContactsList'\nimport Filter from './components/Filter'\nimport './style.css'\n\nfunction App() {\n    return (\n      <div className=\"wrapper\">\n      <CSSTransition in={true} timeout={1000} classNames=\"title\" appear={true}>\n        <h1>Phone Book</h1>\n      </CSSTransition>\n      <CSSTransition in={true} timeout={1000} classNames=\"title\" appear={true}>\n      <ContactsEditor/>\n      </CSSTransition>\n      <Filter/>\n      <ContactsList/>\n      </div>\n    )\n};\nexport default App","import {combineReducers} from 'redux'\nimport {createReducer} from '@reduxjs/toolkit'\nimport actions from './actions'\n\nconst addContact = (state, action) => { return [...state, action.payload.items]}\nconst removeContact = (state, action) => {return state.filter(e => e.id !== action.payload.id)}\nconst filterContact = (state, action) => {return action.payload.filter}\n\n// const items = ( state = [], {type, payload} ) => {\n//     switch(type) {\n//         case actionTypes.ADD: return [...state, payload.items];\n//         case actionTypes.REMOVE: return state.filter(e => e.id !== payload.id);\n//         default: return state;\n//     }\n// }\n\n// const filter = ( state = '', {type, payload}) => {\n//     switch(type) {\n//         case actionTypes.FIND_CONTACT: return payload.filter\n//         default: return state\n//     }\n// }\n\nconst items = createReducer([], {\n    [actions.addContact]: addContact,\n    [actions.removeContact]: removeContact\n})\nconst filter = createReducer('', {\n    [actions.findContact]: filterContact\n})\n\nexport default combineReducers ({\n    items,\n    filter\n})","import {createStore, combineReducers} from 'redux'\nimport contactsReducer from './reducer'\n\nconst rootReducer = combineReducers({\n    contacts: contactsReducer\n});\n\nconst store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    )\n\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\n \nReactDOM.render(\n  <Provider store={store}>\n    <App/>\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}